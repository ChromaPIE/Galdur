[manifest]
version = "1.0.0"
dump_lua = true
priority = 1


# [[patches]]
# [patches.pattern]
# target = 'cardarea.lua'
# pattern = '''self.ARGS.invisible_area_types = self.ARGS.invisible_area_types or {discard=1, voucher=1, play=1, consumeable=1, title = 1, title_2 = 1}'''
# position = 'after'
# match_indent = true
# payload = '''
#     if self.config.stake_chips then
#         sendDebugMessage("CHIPS!")
#         local deck_height = (self.config.deck_height or 0.15)/52
#         for k, card in ipairs(self.cards) do
#             if card.facing == 'front' then card:flip() end

#             if not card.states.drag.is then
#                 card.T.x = self.T.x + 0.5*(self.T.w - card.T.w) + self.shadow_parrallax.x*deck_height*(#self.cards/(self == G.deck and 1 or 2) - k) 
#                 card.T.y = self.T.y + 0.5*(self.T.h - card.T.h) + self.shadow_parrallax.y*deck_height*(#self.cards/(self == G.deck and 1 or 2) - k) + 0.9*self.shuffle_amt*(1 - k*0.01)*(k%2 == 1 and 1 or -0)
#             end
#         end
#     end'''

# Stops fading of chips in tower
# Card:draw()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''self.children.back:draw(overlay)'''
position = 'at'
match_indent = true
payload = '''if self.params.stake_chip then
    if not self.children.back.won then
        self.children.back:draw(G.C.L_BLACK)
    else
        self.children.back:draw(G.C.WHITE)
    end
else
    self.children.back:draw(overlay)
end'''

# Allows hovering of mid stack chips
# Controller:update()
[[patches]]
[patches.pattern]
target = 'engine/controller.lua'
pattern = '''if self.hovering.target and self.hovering.target == self.dragging.target and not self.HID.touch then'''
position = 'before'
match_indent = true
payload = '''
if self.hovering.prev_target and self.hovering.prev_target.role and self.hovering.prev_target.role.major and self.hovering.prev_target.role.major.params and self.hovering.prev_target.role.major.params.stake_chip and self.hovering.target ~= self.hovering.prev_target then self.hovering.prev_target.role.major:stop_hover() end
if self.hovering.target and self.hovering.target.role and self.hovering.target.role.major and self.hovering.target.role.major.params and self.hovering.target.role.major.params.stake_chip and self.hovering.target ~= self.hovering.prev_target then self.hovering.target.role.major:hover() end
'''

[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = '''
(?<indent>[\t ]*)tab_definition_function = G.UIDEF.run_setup_option,[\n\t ]*tab_definition_function_args = 'New Run'
'''
position = 'at'
line_prepend = "$indent"
payload = '''
tab_definition_function = (Galdur.use and G.UIDEF.run_setup_option_new_model or G.UIDEF.run_setup_option),
tab_definition_function_args = 'New Run'

'''

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "local selected_back = saveTable and saveTable.BACK.name or (args.challenge and args.challenge.deck and args.challenge.deck.type) or (self.GAME.viewed_back and self.GAME.viewed_back.name) or self.GAME.selected_back and self.GAME.selected_back.name or 'Red Deck'"
position = 'at'
match_indent = true
payload = '''
local selected_back = saveTable and saveTable.BACK.name or (args.challenge and args.challenge.deck and args.challenge.deck.type) or (args.deck and args.deck.name) or (self.GAME.viewed_back and self.GAME.viewed_back.name) or self.GAME.selected_back and self.GAME.selected_back.name or 'Red Deck'
'''

[[patches]]
[patches.pattern]
target = 'back.lua'
pattern = "delay(0.4)"
position = 'at'
match_indent = true
payload = '''
if not G.jokers then delay(0.4) end
'''

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''G.PROFILES[G.SETTINGS.profile].deck_usage[deck_key].wins[i] = (G.PROFILES[G.SETTINGS.profile].deck_usage[deck_key].wins[i] or 1)'''
position = 'at'
match_indent = true
payload = '''
'''

# Cryptid compat
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local currentBack = self.params.viewed_back and G.GAME.viewed_back or G.GAME.selected_back'''
position = 'at'
match_indent = true
payload = '''local currentBack = type(self.params.viewed_back) == 'table' and self.params.viewed_back or (self.params.viewed_back and G.GAME.viewed_back or G.GAME.selected_back)'''